name: MLOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install dvc[s3]
          python -c "import nltk; nltk.download('punkt'); nltk.download('stopwords'); nltk.download('wordnet'); nltk.download('omw-1.4')"

      - name: Run DVC pipeline
        env:
          CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          dvc repro

      - name: Run tests
        run: |
          if [ -d "tests" ]; then
            python -m pytest tests/ -v --tb=short
          else
            echo "No tests directory found, skipping tests"
          fi

      - name: Validate model artifacts
        run: |
          ls -la models/
          python -c "import pickle; model = pickle.load(open('models/model.pkl', 'rb')); print('✅ Model loaded successfully')"
          python -c "import pickle; vectorizer = pickle.load(open('models/vectorizer.pkl', 'rb')); print('✅ Vectorizer loaded successfully')"

      - name: Promote model to production
        if: success()
        env:
          CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
        run: |
          if [ -f "scripts/promote_model.py" ]; then
            python scripts/promote_model.py
          else
            echo "No promote_model.py script found, skipping model promotion"
          fi

      - name: Configure AWS credentials
        if: success()
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        if: success()
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        if: success()
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .

      - name: Push Docker image to ECR
        if: success()
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Pushing Docker image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "Image pushed successfully!"
          echo "Image URI: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Deploy to EKS (if cluster exists)
        if: success() && github.ref == 'refs/heads/main'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
          EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
        run: |
          # Check if EKS cluster exists
          if aws eks describe-cluster --name $EKS_CLUSTER_NAME --region ${{ secrets.AWS_REGION }} >/dev/null 2>&1; then
            echo "EKS cluster $EKS_CLUSTER_NAME found, updating kubeconfig..."
            aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name $EKS_CLUSTER_NAME
            
            # Check if deployment exists, create if not
            if kubectl get deployment sentiment-app >/dev/null 2>&1; then
              echo "Updating existing deployment..."
              kubectl set image deployment/sentiment-app sentiment-app=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
              kubectl rollout status deployment/sentiment-app
            else
              echo "Creating new deployment..."
              kubectl create deployment sentiment-app --image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
              kubectl expose deployment sentiment-app --type=LoadBalancer --port=5000 --target-port=5000 --name=sentiment-app-service
              echo "Deployment created successfully!"
            fi
            
            kubectl get pods
            kubectl get services
          else
            echo "EKS cluster $EKS_CLUSTER_NAME not found, skipping EKS deployment"
            echo "To deploy to EKS, create cluster first: eksctl create cluster --name $EKS_CLUSTER_NAME --region ${{ secrets.AWS_REGION }}"
          fi